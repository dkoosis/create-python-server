"""Tests for {{ server_name }} MCP server.

This module provides tests for the core server functionality, including:
- Resource handling
- Tool execution
- Configuration
- HTTP endpoints
"""

import asyncio
import json
from pathlib import Path
import pytest
from fastapi.testclient import TestClient
from httpx import AsyncClient
import mcp.types as types

from {{ server_name }}.server import app, mcp_server
from {{ server_name }}.config import ServerConfig
from {{ server_name }}.core import ResourceError, ToolError

@pytest.fixture
def test_config():
    """Provide test configuration."""
    return ServerConfig(
        name="{{ server_name }}",
        version="{{ server_version }}",
        host="127.0.0.1",
        port=8000,
        resource_paths=[Path("tests/resources")]
    )

@pytest.fixture
def client():
    """Provide FastAPI test client."""
    return TestClient(app)

@pytest.mark.asyncio
async def test_health_check(client):
    """Test health check endpoint."""
    response = client.get("/health")
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "healthy"
    assert data["service"] == "{{ server_name }}"
    assert data["version"] == "{{ server_version }}"

@pytest.mark.asyncio
async def test_readiness_check(client):
    """Test readiness check endpoint."""
    response = client.get("/ready")
    assert response.status_code == 200
    assert response.json()["status"] == "ready"

@pytest.mark.asyncio
async def test_list_resources():
    """Test resource listing."""
    resources = await mcp_server.request_context.list_resources()
    assert isinstance(resources, list)
    for resource in resources:
        assert isinstance(resource, types.Resource)
        assert resource.uri
        assert resource.name

@pytest.mark.asyncio
async def test_read_resource():
    """Test resource reading."""
    # Test valid resource
    uri = "example://resource"
    content = await mcp_server.request_context.read_resource(uri)
    assert content
    
    # Test invalid resource
    with pytest.raises(ResourceError):
        await mcp_server.request_context.read_resource("invalid://uri")

@pytest.mark.asyncio
async def test_list_tools():
    """Test tool listing."""
    tools = await mcp_server.request_context.list_tools()
    assert isinstance(tools, list)
    for tool in tools:
        assert isinstance(tool, types.Tool)
        assert tool.name
        assert tool.description
        assert tool.inputSchema

@pytest.mark.asyncio
async def test_call_tool():
    """Test tool execution."""
    # Test valid tool call
    result = await mcp_server.request_context.call_tool(
        "example-tool",
        {"input": "test"}
    )
    assert isinstance(result, list)
    assert len(result) > 0
    
    # Test invalid tool
    with pytest.raises(ToolError):
        await mcp_server.request_context.call_tool(
            "invalid-tool",
            {}
        )
    
    # Test invalid arguments
    with pytest.raises(ToolError):
        await mcp_server.request_context.call_tool(
            "example-tool",
            {}  # Missing required input
        )

@pytest.mark.asyncio
async def test_server_lifecycle(test_config):
    """Test server startup and shutdown."""
    # Test startup
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get("/health")
        assert response.status_code == 200
    
    # Test graceful shutdown
    await app.router.shutdown()
    
def test_config_validation(test_config):
    """Test configuration validation."""
    errors = test_config.validate()
    assert not errors  # No errors in valid config
    
    # Test invalid port
    invalid_config = ServerConfig(
        name="{{ server_name }}",
        port=99999  # Invalid port number
    )
    errors = invalid_config.validate()
    assert errors
    assert any("port" in error.lower() for error in errors)

def test_config_environment(monkeypatch):
    """Test configuration from environment variables."""
    # Set test environment variables
    monkeypatch.setenv("MCP_HOST", "0.0.0.0")
    monkeypatch.setenv("MCP_PORT", "9000")
    monkeypatch.setenv("MCP_LOG_LEVEL", "debug")
    
    config = ServerConfig.from_env()
    assert config.host == "0.0.0.0"
    assert config.port == 9000
    assert config.log_level.value == "debug"

def test_config_file(tmp_path):
    """Test configuration file loading/saving."""
    config_path = tmp_path / "config.json"
    
    # Create test config
    config = ServerConfig(
        name="{{ server_name }}",
        host="0.0.0.0",
        port=9000
    )
    
    # Save and reload
    config.to_file(config_path)
    loaded = ServerConfig.from_file(config_path)
    
    assert loaded.name == config.name
    assert loaded.host == config.host
    assert loaded.port == config.port