"""{{ server_name }} MCP Server.

This server provides MCP capabilities for {{ server_description }}.
It exposes resources and tools via the Model Context Protocol.
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from typing import AsyncIterator, Dict, List, Optional
from pathlib import Path

import uvicorn
from fastapi import FastAPI
from mcp.server.models import InitializationOptions
import mcp.types as types
from mcp.server import NotificationOptions, Server
from pydantic import AnyUrl
import mcp.server.stdio

from .config import ServerConfig

# Configure logging
logging.basicConfig(level=logging.{{ log_level | upper }})
logger = logging.getLogger(__name__)

# Create FastAPI app for HTTP endpoints
app = FastAPI(
    title="{{ server_name }}",
    version="{{ server_version }}",
    description="{{ server_description }}"
)

# Create MCP server
mcp_server = Server("{{ server_name }}")

@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {
        "status": "healthy",
        "service": "{{ server_name }}",
        "version": "{{ server_version }}"
    }

@app.get("/ready")
async def readiness_check():
    """Readiness check endpoint."""
    # Add custom readiness checks here
    return {"status": "ready"}

@mcp_server.list_resources()
async def handle_list_resources() -> List[types.Resource]:
    """List available resources.
    
    Returns:
        List of Resource objects describing available resources
        
    This should be customized to return actual resources provided
    by your server.
    """
    return [
        types.Resource(
            uri=AnyUrl("example://resource"),
            name="Example Resource",
            description="An example resource",
            mimeType="text/plain"
        )
    ]

@mcp_server.read_resource()
async def handle_read_resource(uri: AnyUrl) -> str:
    """Read a specific resource.
    
    Args:
        uri: Resource URI to read
        
    Returns:
        Resource content
        
    Raises:
        ValueError: If resource not found or URI scheme not supported
    """
    if uri.scheme != "example":
        raise ValueError(f"Unsupported URI scheme: {uri.scheme}")
        
    # Add custom resource reading logic here
    return "Example resource content"

@mcp_server.list_tools()
async def handle_list_tools() -> List[types.Tool]:
    """List available tools.
    
    Returns:
        List of Tool objects describing available tools
        
    This should be customized to return actual tools provided
    by your server.
    """
    return [
        types.Tool(
            name="example-tool",
            description="An example tool",
            inputSchema={
                "type": "object",
                "properties": {
                    "input": {"type": "string"}
                },
                "required": ["input"]
            }
        )
    ]

@mcp_server.call_tool()
async def handle_call_tool(
    name: str,
    arguments: Optional[Dict]
) -> List[types.TextContent | types.ImageContent | types.EmbeddedResource]:
    """Handle tool execution requests.
    
    Args:
        name: Tool name to execute
        arguments: Tool arguments
        
    Returns:
        List of tool execution results
        
    Raises:
        ValueError: If tool not found or arguments invalid
    """
    if name != "example-tool":
        raise ValueError(f"Unknown tool: {name}")
        
    if not arguments or "input" not in arguments:
        raise ValueError("Missing required argument: input")
        
    # Add custom tool execution logic here
    return [
        types.TextContent(
            type="text",
            text=f"Processed input: {arguments['input']}"
        )
    ]

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manage application lifecycle."""
    logger.info("Starting up")
    yield
    logger.info("Shutting down")

app.router.lifespan_context = lifespan

async def run_mcp_server():
    """Run the MCP server on stdio."""
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await mcp_server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="{{ server_name }}",
                server_version="{{ server_version }}",
                capabilities=mcp_server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )

async def run_http_server():
    """Run the HTTP server using uvicorn."""
    config = uvicorn.Config(
        app=app,
        host="{{ server_host }}",
        port={{ server_port }},
        log_level="{{ log_level }}"
    )
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    """Run both MCP and HTTP servers concurrently."""
    try:
        # Create tasks for both servers
        mcp_task = asyncio.create_task(run_mcp_server())
        http_task = asyncio.create_task(run_http_server())
        
        # Wait for both servers
        await asyncio.gather(mcp_task, http_task)
    except KeyboardInterrupt:
        logger.info("Shutting down servers...")
    except Exception as e:
        logger.error(f"Error running servers: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())