"""Configuration management for {{ server_name }}.

This module handles server configuration through a layered approach:
1. Default values
2. Environment variables
3. Config files
4. Command line overrides

It follows the Unix philosophy of using simple text-based configuration
and environment variables for easy automation and composition.
"""

import os
import json
from pathlib import Path
from dataclasses import dataclass, field, asdict
from typing import Any, Dict, List, Optional
import logging
from enum import Enum

logger = logging.getLogger(__name__)

class LogLevel(str, Enum):
    """Valid logging levels."""
    DEBUG = "debug"
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"

    @classmethod
    def from_string(cls, level: str) -> 'LogLevel':
        """Convert string to LogLevel, defaulting to INFO."""
        try:
            return cls(level.lower())
        except ValueError:
            logger.warning(f"Invalid log level '{level}', defaulting to INFO")
            return cls.INFO

    def to_python_level(self) -> int:
        """Convert to Python logging level constant."""
        return getattr(logging, self.value.upper())

@dataclass
class ServerConfig:
    """Server configuration settings.
    
    This class manages all server settings with support for environment
    variables and config file overrides.
    """
    # Core settings
    name: str = "{{ server_name }}"
    version: str = "{{ server_version }}"
    description: str = "{{ server_description }}"
    
    # Network settings
    host: str = "{{ server_host }}"
    port: int = {{ server_port }}
    
    # Logging settings
    log_level: LogLevel = LogLevel.{{ log_level | upper }}
    log_file: Optional[str] = None
    
    # Resource settings
    resource_paths: List[Path] = field(default_factory=list)
    max_resource_size: int = 10 * 1024 * 1024  # 10MB
    
    # Security settings
    allowed_origins: List[str] = field(default_factory=lambda: ["*"])
    api_keys: Dict[str, str] = field(default_factory=dict)
    
    # Development settings
    dev_mode: bool = False
    reload: bool = False

    @classmethod
    def from_env(cls) -> 'ServerConfig':
        """Create config from environment variables.
        
        Environment variables take the form MCP_*, e.g.:
        - MCP_HOST: Server host
        - MCP_PORT: Server port
        - MCP_LOG_LEVEL: Logging level
        """
        config = cls()
        
        # Network settings
        if host := os.getenv("MCP_HOST"):
            config.host = host
        if port := os.getenv("MCP_PORT"):
            config.port = int(port)
            
        # Logging settings
        if level := os.getenv("MCP_LOG_LEVEL"):
            config.log_level = LogLevel.from_string(level)
        if log_file := os.getenv("MCP_LOG_FILE"):
            config.log_file = log_file
            
        # Resource settings
        if paths := os.getenv("MCP_RESOURCE_PATHS"):
            config.resource_paths = [Path(p) for p in paths.split(",")]
        if max_size := os.getenv("MCP_MAX_RESOURCE_SIZE"):
            config.max_resource_size = int(max_size)
            
        # Security settings
        if origins := os.getenv("MCP_ALLOWED_ORIGINS"):
            config.allowed_origins = origins.split(",")
            
        # Development settings
        config.dev_mode = os.getenv("MCP_DEV_MODE", "").lower() == "true"
        config.reload = os.getenv("MCP_RELOAD", "").lower() == "true"
        
        return config

    @classmethod
    def from_file(cls, path: Path) -> 'ServerConfig':
        """Load configuration from a JSON file."""
        try:
            config_dict = json.loads(path.read_text())
            
            # Convert paths from strings
            if "resource_paths" in config_dict:
                config_dict["resource_paths"] = [
                    Path(p) for p in config_dict["resource_paths"]
                ]
                
            # Convert log level from string
            if "log_level" in config_dict:
                config_dict["log_level"] = LogLevel.from_string(
                    config_dict["log_level"]
                )
                
            return cls(**config_dict)
            
        except Exception as e:
            logger.error(f"Failed to load config from {path}: {e}")
            return cls()

    def to_file(self, path: Path) -> None:
        """Save configuration to a JSON file."""
        try:
            # Convert to dict, handling Path objects
            config_dict = asdict(self)
            config_dict["resource_paths"] = [
                str(p) for p in self.resource_paths
            ]
            config_dict["log_level"] = self.log_level.value
            
            # Write atomically using temporary file
            temp_path = path.with_suffix('.tmp')
            temp_path.write_text(json.dumps(config_dict, indent=2))
            temp_path.replace(path)
            
        except Exception as e:
            logger.error(f"Failed to save config to {path}: {e}")

    def setup_logging(self) -> None:
        """Configure logging based on settings."""
        log_config = {
            'version': 1,
            'formatters': {
                'default': {
                    'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
                }
            },
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler',
                    'formatter': 'default',
                    'level': self.log_level.to_python_level()
                }
            },
            'root': {
                'level': self.log_level.to_python_level(),
                'handlers': ['console']
            }
        }
        
        # Add file handler if configured
        if self.log_file:
            log_config['handlers']['file'] = {
                'class': 'logging.FileHandler',
                'filename': self.log_file,
                'formatter': 'default',
                'level': self.log_level.to_python_level()
            }
            log_config['root']['handlers'].append('file')
        
        logging.config.dictConfig(log_config)

    def validate(self) -> List[str]:
        """Validate configuration settings.
        
        Returns:
            List of validation error messages, empty if valid
        """
        errors = []
        
        # Validate port range
        if not (1 <= self.port <= 65535):
            errors.append(f"Invalid port number: {self.port}")
            
        # Check resource paths exist
        for path in self.resource_paths:
            if not path.exists():
                errors.append(f"Resource path does not exist: {path}")
                
        return errors